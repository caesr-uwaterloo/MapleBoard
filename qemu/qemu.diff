diff --git a/.gitignore b/.gitignore
index 588769b250..ffc48f38ab 100644
--- a/.gitignore
+++ b/.gitignore
@@ -140,3 +140,4 @@ trace-dtrace-root.h
 trace-dtrace-root.dtrace
 trace-ust-all.h
 trace-ust-all.c
+.vscode
diff --git a/Makefile b/Makefile
index ab0354c153..af059bfaeb 100644
--- a/Makefile
+++ b/Makefile
@@ -257,7 +257,7 @@ configure: ;
 
 $(call set-vpath, $(SRC_PATH))
 
-LIBS+=-lz $(LIBS_TOOLS)
+LIBS+=-lz -lczmq -lzmq $(LIBS_TOOLS)
 
 HELPERS-$(CONFIG_LINUX) = qemu-bridge-helper$(EXESUF)
 
diff --git a/Makefile.target b/Makefile.target
index f9a9da7e7c..cce1270164 100644
--- a/Makefile.target
+++ b/Makefile.target
@@ -139,7 +139,8 @@ obj-y += memory.o
 obj-y += memory_mapping.o
 obj-y += dump.o
 obj-y += migration/ram.o
-LIBS := $(libs_softmmu) $(LIBS)
+# edited for message passing
+LIBS := $(libs_softmmu) $(LIBS) -lzmq -lczmq
 
 # Hardware support
 ifeq ($(TARGET_NAME), sparc64)
diff --git a/hw/misc/Makefile.objs b/hw/misc/Makefile.objs
index 10c88a84b4..ee55503724 100644
--- a/hw/misc/Makefile.objs
+++ b/hw/misc/Makefile.objs
@@ -7,6 +7,8 @@ common-obj-$(CONFIG_SGA) += sga.o
 common-obj-$(CONFIG_ISA_TESTDEV) += pc-testdev.o
 common-obj-$(CONFIG_PCI_TESTDEV) += pci-testdev.o
 common-obj-$(CONFIG_EDU) += edu.o
+common-obj-$(CONFIG_MYDEV) += mydev.o
+common-obj-$(CONFIG_MYDEV) += maple_board_emu_comm.o
 
 common-obj-y += unimp.o
 common-obj-$(CONFIG_FW_CFG_DMA) += vmcoreinfo.o
diff --git a/hw/misc/maple_board_emu_comm.c b/hw/misc/maple_board_emu_comm.c
new file mode 100644
index 0000000000..6e83486f6a
--- /dev/null
+++ b/hw/misc/maple_board_emu_comm.c
@@ -0,0 +1,122 @@
+#include "qemu/osdep.h"
+#include "hw/pci/pci.h"
+#include "hw/pci/msi.h"
+#include "qemu/timer.h"
+#include "qemu/main-loop.h" /* iothread mutex */
+#include "qapi/visitor.h"
+#include "hw/misc/maple_board_emu_comm.h"
+#include "qemu/log.h"
+
+void* mb_context = NULL;
+void* mb_requester = NULL;
+
+void* mb_create_request(
+    uint64_t req_type,
+    uint64_t address,
+    uint64_t data,
+    uint64_t size,
+    uint8_t* dma_payload,
+    uint64_t dma_len
+) {
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Allocating req: %lx\n", sizeof(struct mb_device_request) + dma_len);
+    struct mb_device_request* p_req = malloc(
+        sizeof(struct mb_device_request) + dma_len
+    );
+    p_req->req_type = req_type;
+    p_req->address = address;
+    p_req->data = data;
+    p_req->size = size;
+    p_req->dma_len = dma_len;
+    if(dma_len > 0)
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] memcpy (pl + 0x2000) = %x\n", *(uint32_t*)(dma_payload + 0x2000));
+    if(p_req->dma_len != 0) {
+        memcpy(p_req->dma_payload, dma_payload, dma_len);
+    }
+
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] done\n");
+    return p_req;
+}
+void* mb_create_handshake_request(void) {
+    return mb_create_request(_MB_HS, 0, 0, 0, 0, 0);
+};
+
+uint64_t mb_req_len(struct mb_device_request* req) {
+    return sizeof(struct mb_device_request) + req->dma_len;
+}
+uint64_t mb_resp_len(struct mb_device_response* resp) {
+    return sizeof(struct mb_device_response);
+}
+
+void mb_free_ds(void* ptr) {
+    free(ptr);
+}
+
+void* mb_create_response_buffer(void) {
+    return malloc(sizeof(struct mb_device_response));
+}
+int mb_send_req(struct mb_device_request* req) {
+    size_t len = mb_req_len(req);
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Total Bytes to Send: %lx\n", len);
+    int res = zmq_send(mb_requester, req, len, 0);
+    return res;
+}
+int mb_recv_resp(struct mb_device_response* resp) {
+    int res = zmq_recv(mb_requester, resp, mb_resp_len(resp), 0);
+    if(res < 0) {
+        return -1;
+    } else {
+        return 0;
+    }
+}
+
+int mb_init_server(void) {
+    int res;
+    // initial connection to remote server
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Trying to connect to remote host\n");
+    mb_context = zmq_ctx_new ();
+    mb_requester = zmq_socket (mb_context, ZMQ_REQ);
+    res = zmq_connect (mb_requester, "tcp://localhost:5555");
+    if(res != 0) {
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Cannot connect to localhost:5555\n");
+        return -1;
+    }
+    // initial handshake to make sure that it is correct
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Create initial request\n");
+
+    struct mb_device_request* hs_req = mb_create_handshake_request();
+    size_t req_len = mb_req_len(hs_req);
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] handshake length %lu\n", req_len);
+    res = zmq_send(
+        mb_requester, 
+        hs_req, 
+        req_len,
+        0
+    );
+    if(res < 0) {
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Cannot send to remote server of length %lu, retval: %d, errno: %d", req_len, res, errno);
+        mb_free_ds((void*)hs_req);
+        return -1;
+    }
+    mb_free_ds((void*)hs_req);
+
+    struct mb_device_response* hs_resp = mb_create_response_buffer();
+
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Receiving response from remote \n");
+    res = zmq_recv(mb_requester, hs_resp, mb_resp_len(NULL), 0);
+
+    if(res == -1 || hs_resp->data != 0xfeedc0de) {
+
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Hand shake failed, zmq_recv error \n");
+        mb_free_ds((void*)hs_resp);
+        return -1;
+    } else if(hs_resp->data != 0xfeedc0de) {
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Hand shake failed, corrupted data \n");
+        mb_free_ds((void*)hs_resp);
+        return -1;
+    }
+    mb_free_ds((void*)hs_resp);
+
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Hand Shake Successful\n");
+
+    return 0;
+}
diff --git a/hw/misc/message.proto b/hw/misc/message.proto
new file mode 100644
index 0000000000..ab484c8952
--- /dev/null
+++ b/hw/misc/message.proto
@@ -0,0 +1,14 @@
+syntax = "proto3";
+
+message DeviceRequest {
+  enum RequestType {
+    HandShake = 0;
+    ReadRequest = 1;
+    WriteRequest = 2;
+    DMARequest = 3;
+  }
+  RequestType req = 0;
+  uint64 address = 1;
+  uint64 data = 2;
+
+}
diff --git a/hw/misc/mydev.c b/hw/misc/mydev.c
new file mode 100644
index 0000000000..35fbacadee
--- /dev/null
+++ b/hw/misc/mydev.c
@@ -0,0 +1,609 @@
+/*
+ * QEMU educational PCI device
+ *
+ * Copyright (c) 2012-2015 Jiri Slaby
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "qemu/osdep.h"
+#include "hw/pci/pci.h"
+#include "hw/pci/msi.h"
+#include "qemu/timer.h"
+#include "qemu/main-loop.h" /* iothread mutex */
+#include "qapi/visitor.h"
+#include "qemu/log.h"
+#include "hw/misc/maple_board_emu_comm.h"
+
+
+#define EDU(obj)        OBJECT_CHECK(EduState, obj, "mydev")
+
+#define FACT_IRQ        0x00000001
+#define DMA_IRQ         0x00000100
+
+#define DMA_START       0x40000
+#define DMA_SIZE        4096
+
+typedef struct {
+    PCIDevice pdev;
+    MemoryRegion mmio;
+    MemoryRegion mmio2;
+    MemoryRegion mmio4;
+
+    QemuThread thread;
+    QemuMutex thr_mutex;
+    QemuCond thr_cond;
+    bool stopping;
+
+    uint32_t addr4;
+    uint32_t fact;
+#define EDU_STATUS_COMPUTING    0x01
+#define EDU_STATUS_IRQFACT      0x80
+    uint32_t status;
+
+    uint32_t irq_status;
+
+#define EDU_DMA_RUN             0x1
+#define EDU_DMA_DIR(cmd)        (((cmd) & 0x2) >> 1)
+# define EDU_DMA_FROM_PCI       0
+# define EDU_DMA_TO_PCI         1
+#define EDU_DMA_IRQ             0x4
+    struct dma_state {
+        dma_addr_t src;
+        dma_addr_t dst;
+        dma_addr_t cnt;
+        dma_addr_t cmd;
+    } dma;
+    QEMUTimer dma_timer;
+    char dma_buf[DMA_SIZE];
+    uint64_t dma_mask;
+
+    // emulation
+    // dma_status is similar to the status register in cdma
+    uint32_t dma_ctrl;
+    uint32_t dma_stat;
+    // base address in the host physical memory
+    uint64_t cma_start;
+} EduState;
+
+static bool edu_msi_enabled(EduState *edu)
+{
+    return msi_enabled(&edu->pdev);
+}
+
+static void edu_raise_irq(EduState *edu, uint32_t val)
+{
+    edu->irq_status |= val;
+    if (edu->irq_status) {
+        if (edu_msi_enabled(edu)) {
+            msi_notify(&edu->pdev, 0);
+        } else {
+            pci_set_irq(&edu->pdev, 1);
+        }
+    }
+}
+
+/*
+static void edu_lower_irq(EduState *edu, uint32_t val)
+{
+    edu->irq_status &= ~val;
+
+    if (!edu->irq_status && !edu_msi_enabled(edu)) {
+        pci_set_irq(&edu->pdev, 0);
+    }
+} */
+
+static bool within(uint32_t addr, uint32_t start, uint32_t end)
+{
+    return start <= addr && addr < end;
+}
+
+static void edu_check_range(uint32_t addr, uint32_t size1, uint32_t start,
+                uint32_t size2)
+{
+    uint32_t end1 = addr + size1;
+    uint32_t end2 = start + size2;
+
+    if (within(addr, start, end2) &&
+            end1 > addr && within(end1, start, end2)) {
+        return;
+    }
+
+    hw_error("EDU: DMA range 0x%.8x-0x%.8x out of bounds (0x%.8x-0x%.8x)!",
+            addr, end1 - 1, start, end2 - 1);
+}
+
+static dma_addr_t edu_clamp_addr(const EduState *edu, dma_addr_t addr)
+{
+    dma_addr_t res = addr & edu->dma_mask;
+
+    if (addr != res) {
+        printf("EDU: clamping DMA %#.16"PRIx64" to %#.16"PRIx64"!\n", addr, res);
+    }
+
+    return res;
+}
+
+static void edu_dma_timer(void *opaque)
+{
+    EduState *edu = opaque;
+    bool raise_irq = false;
+
+    if (!(edu->dma.cmd & EDU_DMA_RUN)) {
+        return;
+    }
+
+    if (EDU_DMA_DIR(edu->dma.cmd) == EDU_DMA_FROM_PCI) {
+        uint32_t dst = edu->dma.dst;
+        edu_check_range(dst, edu->dma.cnt, DMA_START, DMA_SIZE);
+        dst -= DMA_START;
+        pci_dma_read(&edu->pdev, edu_clamp_addr(edu, edu->dma.src),
+                edu->dma_buf + dst, edu->dma.cnt);
+    } else {
+        uint32_t src = edu->dma.src;
+        edu_check_range(src, edu->dma.cnt, DMA_START, DMA_SIZE);
+        src -= DMA_START;
+        pci_dma_write(&edu->pdev, edu_clamp_addr(edu, edu->dma.dst),
+                edu->dma_buf + src, edu->dma.cnt);
+    }
+
+    edu->dma.cmd &= ~EDU_DMA_RUN;
+    if (edu->dma.cmd & EDU_DMA_IRQ) {
+        raise_irq = true;
+    }
+
+    if (raise_irq) {
+        edu_raise_irq(edu, DMA_IRQ);
+    }
+}
+
+/*
+static void dma_rw(EduState *edu, bool write, dma_addr_t *val, dma_addr_t *dma,
+                bool timer)
+{
+    if (write && (edu->dma.cmd & EDU_DMA_RUN)) {
+        return;
+    }
+
+    if (write) {
+        *dma = *val;
+    } else {
+        *val = *dma;
+    }
+
+    if (timer) {
+        timer_mod(&edu->dma_timer, qemu_clock_get_ms(QEMU_CLOCK_VIRTUAL) + 100);
+    }
+}
+*/
+
+// Note: these addresses are set in the address editor in the vivado tools
+static int is_xdma_addr_range(hwaddr addr) {
+    return addr < 0x300;
+}
+
+static int is_cdma_addr_range(hwaddr addr) {
+    return addr >= _MB_CDMA_BASE && addr < (_MB_CDMA_BASE + _MB_CDMA_SIZE);
+}
+static int is_conf_addr_range(hwaddr addr) {
+    return addr >= _MB_CONF_BASE && addr < (_MB_CONF_BASE + _MB_CONF_SIZE);
+}
+
+static uint64_t slot_rw(void* opaque, hwaddr addr, uint64_t val, unsigned size, int rw);
+
+static uint64_t ctrl_reg_rw(void* opaque, hwaddr addr, uint64_t val, unsigned size, int rw) {
+
+    EduState *edu = opaque;
+    uint64_t res = ~0ULL;
+    if(is_xdma_addr_range(addr)) {
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-XDMA] IO\n");
+        if(addr == _MB_AXIBAR0_U) {
+            if(rw == _MB_RD && size == 4) { res = edu->cma_start >> 32; }
+            else if(rw == _MB_WR && size == 4) {  
+                edu->cma_start = (edu->cma_start & 0xffffffffl) | (val << 32);
+            }
+        } else if(addr == _MB_AXIBAR0_L) {
+            if(rw == _MB_RD && size == 4) { res = edu->cma_start & 0xffffffffl; }
+            else if(rw == _MB_WR && size == 4) {
+                edu->cma_start = (edu->cma_start & (0xffffffffl << 32)) | (val & 0xffffffffl);
+            }
+        }
+    } else if(is_cdma_addr_range(addr)) {
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-CDMA] IO\n");
+        addr -= _MB_CDMA_BASE;
+        if(addr == _MB_CDMA_CTRL) {
+            qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-CDMA] CTRL Reg\n");
+            if(rw == _MB_RD && size == 4) { res = edu->dma_ctrl; }
+            else if(rw == _MB_WR && size == 4) { 
+                edu->dma_ctrl = (uint32_t)val; 
+                if(edu->dma_ctrl & _MB_CDMA_RST_MASK) {
+                    edu->dma_stat = _MB_CDMA_IDLE_MASK;
+                    edu->dma_ctrl ^= _MB_CDMA_RST_MASK;
+                }
+            }
+        } else if(addr == _MB_CDMA_STAT) {
+            qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-CDMA] STAT Reg\n");
+            if(rw == _MB_RD && size == 4) { res = edu->dma_stat; }
+        } else if(addr == _MB_CDMA_SRC) {
+            qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-CDMA] SRC Reg\n");
+            if(rw == _MB_WR && size == 8) { edu->dma.src = edu->cma_start + val; }
+            else if(rw == _MB_RD && size == 8) { res = edu->dma.src; }
+        } else if(addr == _MB_CDMA_DST) {
+            qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-CDMA] DST Reg\n");
+            if(rw == _MB_WR && size == 8) { edu->dma.dst = val; }
+            else if(rw == _MB_RD && size == 8) { res = edu->dma.dst; }
+        } else if(addr == _MB_CDMA_LEN) {
+            qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-CDMA] LEN Reg, Can Start DMA If Write, size: %lx\n", val);
+            if(rw == _MB_RD && size == 8) { res = edu->dma.cnt; }
+            else if (rw == _MB_WR && size == 8) {
+                edu->dma.cnt = val;
+                // start transmission of the dma to the test bench
+                qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-CDMA] SRC: %lx, DST: %lx, size: %lx\n", edu->dma.src, edu->dma.dst, edu->dma.cnt);
+                void* dma_payload = cpu_physical_memory_map(edu->dma.src, &(edu->dma.cnt), 0);
+                qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-CDMA] mapped size: %lx\n", edu->dma.cnt);
+                void* req = mb_create_request(_MB_DMA, edu->dma.src - edu->cma_start, 0, 0, dma_payload, edu->dma.cnt);
+                cpu_physical_memory_unmap(dma_payload, edu->dma.cnt, 0, 0);
+                void* resp = mb_create_response_buffer();
+                int rc = 0;
+                int done = 0;
+                while(!done) {
+                    rc = mb_send_req(req);
+                    int err = zmq_errno();
+                    if(rc != 0) {
+                        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-CDMA] Cannot send DMA data to remote, errno: %s\n", zmq_strerror(err));
+                        if(err != EAGAIN) {
+                            edu->dma_stat |= _MB_CDMA_DMASlvErr;
+                            done = 1;
+                        } else {
+                            done = 1;
+                            rc = mb_recv_resp(resp);
+                            if (rc != 0) {
+                                qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-CDMA] Cannot recv DMA resp from remote\n");
+                                edu->dma_stat |= _MB_CDMA_DMASlvErr;
+                            }
+                            break;
+                        }
+                    } else {
+                        done = 1;
+                        rc = mb_recv_resp(resp);
+                        if (rc != 0) {
+                            qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-CDMA] Cannot recv DMA resp from remote\n");
+                            edu->dma_stat |= _MB_CDMA_DMASlvErr;
+                        }
+                    }
+                }
+                mb_free_ds(req);
+                mb_free_ds(resp);
+                return res;
+            }
+        }
+    } else if(is_conf_addr_range(addr)) {
+        // slot_rw might also work for this one
+        res = slot_rw(opaque, addr, val, size, rw);
+    }
+    return res;
+}
+
+static uint64_t slot_rw(void* opaque, hwaddr addr, uint64_t val, unsigned size, int rw) {
+    // The function is responsible for sending the request/receiving responses from the verilator testbench
+    void* req = mb_create_request(rw, addr, val, size, NULL, 0);
+    struct mb_device_response* resp = (struct mb_device_response*)mb_create_response_buffer();
+    uint64_t reply_val = 0;
+    int rc = 0;
+    int err = 0;
+    rc = mb_send_req(req);
+    if(rc != 0) {
+        err = zmq_errno();
+        if(err != EAGAIN) {
+            qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-SLOT] Error occurred when sending the reqeust that is not good\n");
+            qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-SLOT] Error str: %s\n", zmq_strerror(err));
+            _MB_HANG;
+        }
+    }
+    rc = mb_recv_resp(resp);
+    if(rc != 0) {
+        err = zmq_errno();
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-SLOT] Error occurred when recving the resposne that is not good\n");
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-SLOT] Error str: %s\n", zmq_strerror(err));
+        _MB_HANG;
+    }
+
+    if(addr != resp->address) {
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-SLOT] Wrong addr expected: %lx, got: %lx\n", addr, resp->address);
+        _MB_HANG;
+    }
+
+    reply_val = resp->data;
+
+    mb_free_ds(req);
+    mb_free_ds(resp);
+    return reply_val;
+}
+
+static uint64_t edu_mmio_read2(void *opaque, hwaddr addr, unsigned size) { 
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-mmio2] host trying to read from: %lx\n", addr);
+    return slot_rw(opaque, addr + _MB_SLOT_SHIFT_0, 0, size, _MB_RD);
+}
+static uint64_t edu_mmio_read4(void *opaque, hwaddr addr, unsigned size) { 
+    // same as another one, but with some offset
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-mmio4] host trying to read from: %lx\n", addr);
+    return slot_rw(opaque, addr + _MB_SLOT_SHIFT_1, 0, size, _MB_RD);
+}
+
+static uint64_t edu_mmio_read(void *opaque, hwaddr addr, unsigned size) {
+
+    uint64_t rd_val = ctrl_reg_rw(opaque, addr, 0, size, _MB_RD);
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-mmio0] host trying to read from: %lx,  res: %lx, sz: %d\n", addr, rd_val, size);
+    return rd_val;
+
+
+    /*
+    if (size != 4) {
+        return val;
+    }
+
+    switch (addr) {
+    case 0x00:
+        val = 0x010000edu;
+        break;
+    case 0x04:
+        val = edu->addr4;
+        break;
+    case 0x08:
+        qemu_mutex_lock(&edu->thr_mutex);
+        val = edu->fact;
+        qemu_mutex_unlock(&edu->thr_mutex);
+        break;
+    case 0x20:
+        val = atomic_read(&edu->status);
+        break;
+    case 0x24:
+        val = edu->irq_status;
+        break;
+    case 0x80:
+        dma_rw(edu, false, &val, &edu->dma.src, false);
+        break;
+    case 0x88:
+        dma_rw(edu, false, &val, &edu->dma.dst, false);
+        break;
+    case 0x90:
+        dma_rw(edu, false, &val, &edu->dma.cnt, false);
+        break;
+    case 0x98:
+        dma_rw(edu, false, &val, &edu->dma.cmd, false);
+        break;
+    }
+
+    return val;
+    */
+}
+static void edu_mmio_write2(void *opaque, hwaddr addr, uint64_t val, unsigned size) {
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-mmio2] host trying to write to: %lx\n", addr);
+    slot_rw(opaque, addr + _MB_SLOT_SHIFT_0, val, size, _MB_WR);
+}
+static void edu_mmio_write4(void *opaque, hwaddr addr, uint64_t val, unsigned size) {
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-mmio4] host trying to write to: %lx\n", addr);
+    slot_rw(opaque, addr + _MB_SLOT_SHIFT_1, val, size, _MB_WR);
+}
+
+static void edu_mmio_write(void *opaque, hwaddr addr, uint64_t val,
+                unsigned size)
+{
+    // EduState *edu = opaque;
+    qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard-mmio0] host trying to write to: %lx, data: %lx, sz: %d\n", addr, val, size);
+
+    ctrl_reg_rw(opaque, addr, val, size, _MB_WR);
+}
+
+static const MemoryRegionOps edu_mmio_ops = {
+    .read = edu_mmio_read,
+    .write = edu_mmio_write,
+    .endianness = DEVICE_NATIVE_ENDIAN,
+    .valid = {
+        .min_access_size = 4,
+        .max_access_size = 8,
+    },
+    .impl = {
+        .min_access_size = 4,
+        .max_access_size = 8,
+    },
+};
+static const MemoryRegionOps edu_mmio_ops2 = {
+    .read = edu_mmio_read2,
+    .write = edu_mmio_write2,
+    .endianness = DEVICE_NATIVE_ENDIAN,
+    .valid = {
+        .min_access_size = 1,
+        .max_access_size = 16,
+    },
+    .impl = {
+        .min_access_size = 1,
+        .max_access_size = 16,
+    },
+};
+static const MemoryRegionOps edu_mmio_ops4 = {
+    .read = edu_mmio_read4,
+    .write = edu_mmio_write4,
+    .endianness = DEVICE_NATIVE_ENDIAN,
+    .valid = {
+        .min_access_size = 1,
+        .max_access_size = 8,
+    },
+    .impl = {
+        .min_access_size = 1,
+        .max_access_size = 8,
+    },
+};
+
+/*
+ * We purposely use a thread, so that users are forced to wait for the status
+ * register.
+ */
+static void *edu_fact_thread(void *opaque)
+{
+    EduState *edu = opaque;
+
+    while (1) {
+        uint32_t val, ret = 1;
+
+        qemu_mutex_lock(&edu->thr_mutex);
+        while ((atomic_read(&edu->status) & EDU_STATUS_COMPUTING) == 0 &&
+                        !edu->stopping) {
+            qemu_cond_wait(&edu->thr_cond, &edu->thr_mutex);
+        }
+
+        if (edu->stopping) {
+            qemu_mutex_unlock(&edu->thr_mutex);
+            break;
+        }
+
+        val = edu->fact;
+        qemu_mutex_unlock(&edu->thr_mutex);
+
+        while (val > 0) {
+            ret *= val--;
+        }
+
+        /*
+         * We should sleep for a random period here, so that students are
+         * forced to check the status properly.
+         */
+
+        qemu_mutex_lock(&edu->thr_mutex);
+        edu->fact = ret;
+        qemu_mutex_unlock(&edu->thr_mutex);
+        atomic_and(&edu->status, ~EDU_STATUS_COMPUTING);
+
+        if (atomic_read(&edu->status) & EDU_STATUS_IRQFACT) {
+            qemu_mutex_lock_iothread();
+            edu_raise_irq(edu, FACT_IRQ);
+            qemu_mutex_unlock_iothread();
+        }
+    }
+
+    return NULL;
+}
+
+static void pci_edu_realize(PCIDevice *pdev, Error **errp)
+{
+    EduState *edu = DO_UPCAST(EduState, pdev, pdev);
+    uint8_t *pci_conf = pdev->config;
+
+    pci_config_set_interrupt_pin(pci_conf, 1);
+
+    if (msi_init(pdev, 0, 1, true, false, errp)) {
+        return;
+    }
+
+    timer_init_ms(&edu->dma_timer, QEMU_CLOCK_VIRTUAL, edu_dma_timer, edu);
+
+    qemu_mutex_init(&edu->thr_mutex);
+    qemu_cond_init(&edu->thr_cond);
+    qemu_thread_create(&edu->thread, "mydev", edu_fact_thread,
+                       edu, QEMU_THREAD_JOINABLE);
+
+    memory_region_init_io(&edu->mmio, OBJECT(edu), &edu_mmio_ops, edu,
+                    "edu-mmio", 64 << 20);
+    memory_region_init_io(&edu->mmio2, OBJECT(edu), &edu_mmio_ops2, edu,
+                    "edu-mmio2", 256 << 20);
+    memory_region_init_io(&edu->mmio4, OBJECT(edu), &edu_mmio_ops4, edu,
+                    "edu-mmio4", 256 << 20);
+    // simulate the mmio region that we see in there
+    pci_register_bar(pdev, 0, PCI_BASE_ADDRESS_SPACE_MEMORY | PCI_BASE_ADDRESS_MEM_TYPE_64, &edu->mmio);
+    pci_register_bar(pdev, 2, PCI_BASE_ADDRESS_SPACE_MEMORY | PCI_BASE_ADDRESS_MEM_TYPE_64, &edu->mmio2);
+    pci_register_bar(pdev, 4, PCI_BASE_ADDRESS_SPACE_MEMORY | PCI_BASE_ADDRESS_MEM_TYPE_64, &edu->mmio4);
+}
+
+static void pci_edu_uninit(PCIDevice *pdev)
+{
+    EduState *edu = DO_UPCAST(EduState, pdev, pdev);
+
+    qemu_mutex_lock(&edu->thr_mutex);
+    edu->stopping = true;
+    qemu_mutex_unlock(&edu->thr_mutex);
+    qemu_cond_signal(&edu->thr_cond);
+    qemu_thread_join(&edu->thread);
+
+    qemu_cond_destroy(&edu->thr_cond);
+    qemu_mutex_destroy(&edu->thr_mutex);
+
+    timer_del(&edu->dma_timer);
+}
+
+static void edu_obj_uint64(Object *obj, Visitor *v, const char *name,
+                           void *opaque, Error **errp)
+{
+    uint64_t *val = opaque;
+
+    visit_type_uint64(v, name, val, errp);
+}
+
+static void edu_instance_init(Object *obj)
+{
+    int res;
+    qemu_log_mask(LOG_GUEST_ERROR, "In edu_instance_init, trying to connect to the remote\n");
+    res = mb_init_server();
+    if(res == -1) {
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Cannot initialize connection\n");
+        exit(-1);
+    } else {
+        qemu_log_mask(LOG_GUEST_ERROR, "[MapleBoard] Remote connection succeeded\n");
+    }
+
+    EduState *edu = EDU(obj);
+
+    edu->dma_mask = (1UL << 28) - 1;
+    // initialization
+    edu->dma_stat = 0;
+    edu->dma_stat = edu->dma_stat | _MB_CDMA_IDLE_MASK;
+    edu->dma_ctrl = 0;
+    object_property_add(obj, "dma_mask", "uint64", edu_obj_uint64,
+                    edu_obj_uint64, NULL, &edu->dma_mask, NULL);
+}
+
+static void edu_class_init(ObjectClass *class, void *data)
+{
+    PCIDeviceClass *k = PCI_DEVICE_CLASS(class);
+
+    k->realize = pci_edu_realize;
+    k->exit = pci_edu_uninit;
+    k->vendor_id = 0x10ee;
+    k->device_id = 0x903f;
+    k->revision = 0x10;
+    k->class_id = PCI_CLASS_OTHERS;
+}
+
+static void pci_edu_register_types(void)
+{
+    static InterfaceInfo interfaces[] = {
+        { INTERFACE_CONVENTIONAL_PCI_DEVICE },
+        { },
+    };
+    static const TypeInfo edu_info = {
+        .name          = "mydev",
+        .parent        = TYPE_PCI_DEVICE,
+        .instance_size = sizeof(EduState),
+        .instance_init = edu_instance_init,
+        .class_init    = edu_class_init,
+        .interfaces = interfaces,
+    };
+
+    type_register_static(&edu_info);
+}
+type_init(pci_edu_register_types)
diff --git a/include/hw/misc/maple_board_emu_comm.h b/include/hw/misc/maple_board_emu_comm.h
new file mode 100644
index 0000000000..fa0263e242
--- /dev/null
+++ b/include/hw/misc/maple_board_emu_comm.h
@@ -0,0 +1,94 @@
+#ifndef _MAPLE_BOARD_EMU_COMM_H
+#define _MAPLE_BOARD_EMU_COMM_H
+
+#include <czmq.h>
+#define _MB_HS  0
+#define _MB_DMA 1
+#define _MB_RD  2
+#define _MB_WR  3
+
+#define _MB_AXIBAR0_U 0x208
+#define _MB_AXIBAR0_L 0x20c
+
+// CDMA addresses
+#define _MB_CDMA_BASE 0x200000
+#define _MB_CDMA_SIZE 0x100000
+// Theses are offsets to _MB_CDMA_BASE
+#define _MB_CDMA_CTRL 0x0
+#define _MB_CDMA_STAT 0x4
+// High means resetting
+// Low means reset down
+#define _MB_CDMA_RST_MASK 0b100
+// High means idle
+// Low means busy
+#define _MB_CDMA_IDLE_MASK 0b10
+// We only support moving from the host to the device
+#define _MB_CDMA_SRC 0x18
+#define _MB_CDMA_DST 0x20
+// Setting len triggers the transaction
+#define _MB_CDMA_LEN 0x28
+// The ddr base address for the cdma, this is set in the address editor in the block design
+#define _MB_DDR_BASE 0x120000000UL
+#define _MB_CDMA_DMADecErr (1ULL<<6)
+#define _MB_CDMA_DMASlvErr (1ULL<<5)
+#define _MB_CDMA_DMAIntErr (1ULL<<4)
+// 256 MB
+#define _MB_SLOT_SHIFT_0 (0x100000000UL)
+#define _MB_SLOT_SHIFT_1 (0x100000000UL + 256UL * 1024UL * 1024UL)
+
+#define _MB_HANG do { } while(1)
+
+#define _MB_CONF_BASE 0x100000
+#define _MB_CONF_SIZE 0x100000
+
+extern void* mb_context;
+extern void* mb_requester;
+
+struct mb_device_request;
+struct mb_device_response;
+
+// perform the initialization of the zmq server
+// returns false if handshake with the remote failed
+int mb_init_server(void);
+
+// use malloc to allocate space for resources
+void* mb_create_request(
+    uint64_t req_type,
+    uint64_t address,
+    uint64_t data,
+    uint64_t size,
+    uint8_t* dma_payload,
+    uint64_t dma_len
+);
+void* mb_create_response_buffer(void);
+uint64_t mb_req_len(struct mb_device_request* req);
+uint64_t mb_resp_len(struct mb_device_response* resp);
+void* mb_create_handshake_request(void);
+int mb_send_req(struct mb_device_request* req);
+int mb_recv_resp(struct mb_device_response* resp);
+
+// free the data structure created by mb_create_*
+void mb_free_ds(void* ptr);
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+struct mb_device_request {
+    uint64_t req_type;
+    uint64_t address;
+    uint64_t data;
+    uint64_t size;
+    uint64_t dma_len;
+    uint8_t dma_payload[];
+};
+struct mb_device_response {
+    uint64_t address;
+    uint64_t data;
+};
+#ifdef __cplusplus
+}
+#endif
+
+
+
+#endif
