
package utils

import chisel3._
import chisel3.experimental.Analog

/** a VU9P shell wrapper  */
class VU9PShell(val pci_width: Int = 16) extends BlackBox {
  val io = IO(new Bundle {
    val CONF_araddr = Output(UInt(64.W))
    val CONF_arburst = Output(UInt(2.W))
    val CONF_arcache = Output(UInt(4.W))
    val CONF_arlen = Output(UInt(8.W))
    val CONF_arlock = Output(UInt(1.W))
    val CONF_arprot = Output(UInt(3.W))
    val CONF_arqos = Output(UInt(4.W))
    val CONF_arready = Input(UInt(1.W))
    // val CONF_arregion = Output(UInt(4.W))
    val CONF_arsize = Output(UInt(3.W))
    val CONF_arvalid = Output(UInt(1.W))
    val CONF_awaddr = Output(UInt(64.W))
    val CONF_awburst = Output(UInt(2.W))
    val CONF_awcache = Output(UInt(4.W))
    val CONF_awlen = Output(UInt(8.W))
    val CONF_awlock = Output(UInt(1.W))
    val CONF_awprot = Output(UInt(3.W))
    val CONF_awqos = Output(UInt(4.W))
    val CONF_awready = Input(UInt(1.W))
    // val CONF_awregion = Output(UInt(4.W))
    val CONF_awsize = Output(UInt(3.W))
    val CONF_awvalid = Output(UInt(1.W))
    val CONF_bready = Output(UInt(1.W))
    val CONF_bresp = Input(UInt(2.W))
    val CONF_bvalid = Input(UInt(1.W))
    val CONF_rdata = Input(UInt(64.W))
    val CONF_rlast = Input(UInt(1.W))
    val CONF_rready = Output(UInt(1.W))
    val CONF_rresp = Input(UInt(2.W))
    val CONF_rvalid = Input(UInt(1.W))
    val CONF_wdata = Output(UInt(64.W))
    val CONF_wlast = Output(UInt(1.W))
    val CONF_wready = Input(UInt(1.W))
    val CONF_wstrb = Output(UInt(8.W))
    val CONF_wvalid = Output(UInt(1.W))
    val SLOT_araddr = Output(UInt(64.W))
    // val SLOT_arburst = Output(UInt(2.W))
    // val SLOT_arcache = Output(UInt(4.W))
    // val SLOT_arlen = Output(UInt(8.W))
    // val SLOT_arlock = Output(UInt(1.W))
    val SLOT_arprot = Output(UInt(3.W))
    // val SLOT_arqos = Output(UInt(4.W))
    val SLOT_arready = Input(UInt(1.W))
    // val SLOT_arregion = Output(UInt(4.W))
    // val SLOT_arsize = Output(UInt(3.W))
    val SLOT_arvalid = Output(UInt(1.W))
    val SLOT_awaddr = Output(UInt(64.W))
    // val SLOT_awburst = Output(UInt(2.W))
    // val SLOT_awcache = Output(UInt(4.W))
    // val SLOT_awlen = Output(UInt(8.W))
    // val SLOT_awlock = Output(UInt(1.W))
    val SLOT_awprot = Output(UInt(3.W))
    // val SLOT_awqos = Output(UInt(4.W))
    val SLOT_awready = Input(UInt(1.W))
    // val SLOT_awregion = Output(UInt(4.W))
    // val SLOT_awsize = Output(UInt(3.W))
    val SLOT_awvalid = Output(UInt(1.W))
    val SLOT_bready = Output(UInt(1.W))
    val SLOT_bresp = Input(UInt(2.W))
    val SLOT_bvalid = Input(UInt(1.W))
    val SLOT_rdata = Input(UInt(64.W))
    // val SLOT_rlast = Input(UInt(1.W))
    val SLOT_rready = Output(UInt(1.W))
    val SLOT_rresp = Input(UInt(2.W))
    val SLOT_rvalid = Input(UInt(1.W))
    val SLOT_wdata = Output(UInt(64.W))
    // val SLOT_wlast = Output(UInt(1.W))
    val SLOT_wready = Input(UInt(1.W))
    val SLOT_wstrb = Output(UInt(8.W))
    val SLOT_wvalid = Output(UInt(1.W))
    val SMEM_araddr = Input(UInt(64.W))
    val SMEM_arburst = Input(UInt(2.W))
    val SMEM_arcache = Input(UInt(4.W))
    val SMEM_arid = Input(UInt(1.W))
    val SMEM_arlen = Input(UInt(8.W))
    val SMEM_arlock = Input(UInt(1.W))
    val SMEM_arprot = Input(UInt(3.W))
    val SMEM_arqos = Input(UInt(4.W))
    val SMEM_arready = Output(UInt(1.W))
    // val SMEM_arregion = Input(UInt(4.W))

    val SMEM_arsize = Input(UInt(3.W))
    val SMEM_arvalid = Input(UInt(1.W))
    val SMEM_awaddr = Input(UInt(64.W))
    val SMEM_awburst = Input(UInt(2.W))
    val SMEM_awcache = Input(UInt(4.W))
    val SMEM_awid = Input(UInt(1.W))
    val SMEM_awlen = Input(UInt(8.W))
    val SMEM_awlock = Input(UInt(1.W))
    val SMEM_awprot = Input(UInt(3.W))
    val SMEM_awqos = Input(UInt(4.W))
    val SMEM_awready = Output(UInt(1.W))
    // val SMEM_awegion = Input(UInt(4.W))
    val SMEM_awsize = Input(UInt(3.W))
    val SMEM_awvalid = Input(UInt(1.W))
    val SMEM_bid = Output(UInt(1.W))
    val SMEM_bready = Input(UInt(1.W))
    val SMEM_bresp = Output(UInt(2.W))
    val SMEM_bvalid = Output(UInt(1.W))
    val SMEM_rdata = Output(UInt(64.W))
    val SMEM_rid = Output(UInt(1.W))
    val SMEM_rlast = Output(UInt(1.W))
    val SMEM_rready = Input(UInt(1.W))
    val SMEM_rresp = Output(UInt(2.W))
    val SMEM_rvalid = Output(UInt(1.W))
    val SMEM_wdata = Input(UInt(64.W))
    val SMEM_wlast = Input(UInt(1.W))
    val SMEM_wready = Output(UInt(1.W))
    val SMEM_wstrb = Input(UInt(8.W))
    val SMEM_wvalid = Input(UInt(1.W))

    val pci_express_x16_rxn = Input(UInt(pci_width.W))
    val pci_express_x16_rxp = Input(UInt(pci_width.W))
    val pci_express_x16_txn = Output(UInt(pci_width.W))
    val pci_express_x16_txp = Output(UInt(pci_width.W))

    /*
    val pci_express_x8_rxn = Input(UInt(8.W))
    val pci_express_x8_rxp = Input(UInt(8.W))
    val pci_express_x8_txn = Output(UInt(8.W))
    val pci_express_x8_txp = Output(UInt(8.W))
     */

    /*
    val pci_express_x1_rxn = Input(UInt(1.W))
    val pci_express_x1_rxp = Input(UInt(1.W))
    val pci_express_x1_txn = Output(UInt(1.W))
    val pci_express_x1_txp = Output(UInt(1.W))

     */

    val pcie_perstn = Input(UInt(1.W))
    val pcie_refclk_clk_n = Input(UInt(1.W))
    val pcie_refclk_clk_p = Input(UInt(1.W))
    val peripheral_reset_0 = Output(Bool())
    val root_clk = Output(Clock())
    val sys_clk_clk_n = Input(UInt(1.W))
    val sys_clk_clk_p = Input(UInt(1.W))

    /* ddr */
    val C1_DDR4_0_act_n = Output(UInt(1.W))
    val C1_DDR4_0_adr = Output(UInt(17.W))
    val C1_DDR4_0_ba = Output(UInt(2.W))
    val C1_DDR4_0_bg = Output(UInt(2.W))
    val C1_DDR4_0_ck_c = Output(UInt(1.W))
    val C1_DDR4_0_ck_t = Output(UInt(1.W))
    val C1_DDR4_0_cke = Output(UInt(1.W))
    val C1_DDR4_0_cs_n = Output(UInt(1.W))
    val C1_DDR4_0_dm_n = Analog(8.W)
    val C1_DDR4_0_dq = Analog(64.W)
    val C1_DDR4_0_dqs_c = Analog(8.W)
    val C1_DDR4_0_dqs_t = Analog(8.W)
    val C1_DDR4_0_odt = Output(UInt(1.W))
    val C1_DDR4_0_reset_n = Output(UInt(1.W))
    val dimm1_refclk_clk_n = Input(UInt(1.W))
    val dimm1_refclk_clk_p = Input(UInt(1.W))
  })
  override def desiredName = "shell"
}
